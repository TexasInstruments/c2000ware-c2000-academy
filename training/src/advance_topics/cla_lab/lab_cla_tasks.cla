//############################################################################
//
// FILE: lab_cla_tasks.cla
//
// TITLE: Lab - CLA
//
// C2K ACADEMY URL: https://dev.ti.com/tirex/local?id=source_c2000_academy_labs_advanced_topics_c2000_lab_cla&packageId=C2000-ACADEMY
//
// In this lab, we will use the Control Law Accelerator (CLA) to implement a
// FIR lowpass filter. We will apply a PWM waveform to the input of our
// lowpass filter, which will result in a sinusoidal waveform at the output.
// The PWM waveform will be generated using one of the ePWM modules and it
// will be sampled via the ADC at a given sample rate. Both the filtered and
// unfiltered waveforms will be viewed in a real-time Code Composer Studio
// (CCS) debug session via internal buffers. [[r! F28002x and F280013x Devices
// This lab cannot be performed on the F28002x and F280013x devices since they
// do not have a CLA. ]]
//
//############################################################################
// $Copyright:
// Copyright (c) 2021 Texas Instruments Incorporated - http://www.ti.com/
//
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
//   Redistributions of source code must retain the above copyright 
//   notice, this list of conditions and the following disclaimer.
// 
//   Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer in the 
//   documentation and/or other materials provided with the   
//   distribution.
// 
//   Neither the name of Texas Instruments Incorporated nor the names of
//   its contributors may be used to endorse or promote products derived
//   from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// $
//############################################################################

#include "driverlib.h"
#include "board.h"
#include "lab_shared.h"

// Length of FIR filter. Order = LEN - 1.
#define FIR_LEN 32

// The filter coefficients below were generated using the MATLAB FDATool
// with the following parameters:
// Design Method = FIR Equiripple
// Type          = Lowpass
// Order         = Minimum Order
// Fs            = 8000
// Fpass         = 1000
// Fstop         = 1500
// Apass         = 1dB
// Astop         = 60dB
const float coeffs[FIR_LEN]= {
    -0.0006103139426196,-0.005592184655005,-0.01292485322836 ,-0.01926532895538,
    -0.01762908502044  ,-0.004303218458627, 0.01563724674838 , 0.02815885544785,
     0.01902562195175  ,-0.01290472511163 ,-0.04827630093442 ,-0.0545188692635,
    -0.006464860729499 , 0.09270744275212 , 0.2064249836238  , 0.2822241125204,
     0.2822241125204   , 0.2064249836238  , 0.09270744275212 ,-0.006464860729499,
    -0.0545188692635   ,-0.04827630093442 ,-0.01290472511163 , 0.01902562195175,
     0.02815885544785  , 0.01563724674838 ,-0.004303218458627,-0.01762908502044,
    -0.01926532895538  ,-0.01292485322836 ,-0.005592184655005,-0.0006103139426196
};

// Filter delay line.
float delay[FIR_LEN];

// FIR LP filter task.
__attribute__((interrupt)) void Cla1Task1(void)
{
    int16_t i;
    uint16_t tmpData;
    filter_out = 0.0;

    // Uncomment this to debug the CLA while connected to the debugger
    //__mdebugstop();

    // Read in new sample and subtract off the bias.
    tmpData = ADC_readResult(myADC0_RESULT_BASE, myADC0_SOC0);
    filter_in = ((float)(tmpData) - (float)(1 << (ADC_BITS - 1)))*ADC_VSTEP;

    // Shift the delay line to the right by 1.
    #pragma UNROLL(FIR_LEN - 1)
    for (i = FIR_LEN - 1; i > 0; i--) {
        delay[i] = delay[i-1];
        filter_out += coeffs[i]*delay[i];
    }

    // Add the new ADC sample to the delay line.
    delay[0] = filter_in;
    filter_out += coeffs[0]*delay[0];
}

// Init task.
__attribute__((interrupt)) void Cla1Task8(void)
{
    int16_t i;

    for (i = 0; i < ((int16_t)FIR_LEN); i++) {
        delay[i] = 0.0;
    }
}
